import java.util.HashSet;
import java.util.Set;
/*
You are given a string S, consisting of N digits, that represents a number. You can change at most one digit in the string to any other digit. How many different numbers divisible by 3 can be obtained in this way?

write a function: class Solution{ public int solution(String S); }

that, given a string S of length N, returns an integer specifying how many numbers divisible by 3 can be obtained with at most one change of a digit. Example:

    Given S="23", the function should return 7. All the numbers divisible by 3 that can be obtained after at most one change are: 03, 21, 24, 27, 33, 63 and 93.

    Given S="0081", the function should return 11. All the numbers divisible by 3 that can be obtained after at most one change are: 0021, 0051, 0081, 0084, 0087, 0381, 0681, 0981, 3081, 6081, 9081.

    Given S="022", the function should return 9. All the numbers divisible by 3 that can be obtained after at most one change are: 012, 021, 024, 027, 042, 072, 222, 522, 822.

 */
public class MainClass1
{
    public static int solution(String s){
        Set<String> ss = new HashSet<>();
        for(int i=0;i<10;i++)
        {
            for(int j=0;j<s.length();j++){
                String newString = s.substring(0, j) + i+ s.substring(j + 1);
                if(Integer.parseInt(newString)%3==0)
                {
                    ss.add(newString);
                }
            }
        }
        return ss.size();

    }
    public static void main(String[] args)
    {
        String s = "0081";
        System.out.println(solution(s));
    }
}

